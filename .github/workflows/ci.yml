# On a push to any branch this workflow:
# - builds the Docker image,
# - build wheels for different Python versions,
# - installs the wheel for each Python version and runs the unit tests
#   against newest and oldest versions of dependencies.
# On manual dispatch this workflow:
# - pushes the previously built Docker image to DockerHub with tag "dev".

name: ci and release

on:
  push:
  workflow_dispatch:

jobs:
  build_docker_x86_64:
    name: Build Docker image
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and export x86_64
        uses: docker/build-push-action@v6
        with:
          context: .
          platforms: linux/amd64
          build-args: "ARCH=x86_64"
          tags: mv-extractor:local-x86_64
          outputs: type=docker,dest=/tmp/image-x86_64.tar
          cache-from: type=registry,ref=lubo1994/mv-extractor:buildcache-x86_64
          cache-to: type=registry,ref=lubo1994/mv-extractor:buildcache-x86_64,mode=max

      - name: Upload x86_64 Docker image as artifact
        uses: actions/upload-artifact@v4
        with:
          name: mv-extractor-image-x86_64
          path: /tmp/image-x86_64.tar

  build_docker_aarch64:
    name: Build Docker image
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and export aarch64
        uses: docker/build-push-action@v6
        with:
          context: .
          platforms: linux/arm64
          build-args: "ARCH=aarch64"
          tags: mv-extractor:local-aarch64
          outputs: type=docker,dest=/tmp/image-aarch64.tar
          cache-from: type=registry,ref=lubo1994/mv-extractor:buildcache-aarch64
          cache-to: type=registry,ref=lubo1994/mv-extractor:buildcache-aarch64,mode=max

      - name: Upload aarch64 Docker image as artifact
        uses: actions/upload-artifact@v4
        with:
          name: mv-extractor-image-aarch64
          path: /tmp/image-aarch64.tar

  test_docker_x86_64:
    name: Run unit tests in Docker container (only for the Python version used in the Dockerfile command)
    runs-on: ubuntu-latest
    needs:
      - build_docker_x86_64

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Download x86_64 Docker image
        uses: actions/download-artifact@v4
        with:
          name: mv-extractor-image-x86_64
          path: /tmp

      - name: Load Docker image
        run: |
          docker load --input /tmp/image-x86_64.tar

      - name: Run unit tests
        run: |
          docker run -v ${{ github.workspace }}:/home/video_cap \
            mv-extractor:local-x86_64 \
              python3.12 -m unittest discover -s tests -p "*tests.py"

  build_and_test_wheels:
    name: Build wheels for cp${{ matrix.python }}-${{ matrix.platform_id }}
    runs-on: ${{ matrix.os }}
    needs: 
      - build_docker_x86_64
      - build_docker_aarch64
    strategy:
      # Ensure that a wheel builder finishes even if another fails
      fail-fast: false
      matrix:
        include:
        - os: ubuntu-latest
          python: 39
          bitness: 64
          platform_id: manylinux
          manylinux_x86_64_image: mv-extractor:local-x86_64
          manylinux_aarch64_image: mv-extractor:local-aarch64
          numpy_min_version: "numpy==1.19.3"
          opencv_min_version: "opencv-python==4.4.0.46"
        - os: ubuntu-latest
          python: 310
          bitness: 64
          platform_id: manylinux
          manylinux_x86_64_image: mv-extractor:local-x86_64
          manylinux_aarch64_image: mv-extractor:local-aarch64
          numpy_min_version: "numpy==1.21.2"
          opencv_min_version: "opencv-python==4.5.4.60"
        - os: ubuntu-latest
          python: 311
          bitness: 64
          platform_id: manylinux
          manylinux_x86_64_image: mv-extractor:local-x86_64
          manylinux_aarch64_image: mv-extractor:local-aarch64
          numpy_min_version: "numpy==1.23.3"
          opencv_min_version: "opencv-python==4.7.0.72"
        - os: ubuntu-latest
          python: 312
          bitness: 64
          platform_id: manylinux
          manylinux_x86_64_image: mv-extractor:local-x86_64
          manylinux_aarch64_image: mv-extractor:local-aarch64
          numpy_min_version: "numpy==1.26.0"
          opencv_min_version: "opencv-python==4.9.0.80"
        # opencv-python does not yet support Python 3.13 as of Oct 2024
        # - os: ubuntu-latest
        #   python: 313
        #   bitness: 64
        #   platform_id: manylinux
        #   manylinux_x86_64_image: mv-extractor:local-x86_64
        #   manylinux_aarch64_image: mv-extractor:local-aarch64
        #   numpy_min_version: "numpy==2.1.0"
        #   opencv_min_version: "opencv-python=="

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Download x86_64 Docker image
        uses: actions/download-artifact@v4
        with:
          name: mv-extractor-image-x86_64
          path: /tmp

      - name: Download aarch64 Docker image
        uses: actions/download-artifact@v4
        with:
          name: mv-extractor-image-aarch64
          path: /tmp
      
      - name: Load Docker images
        run: |
          docker load --input /tmp/image-x86_64.tar
          docker load --input /tmp/image-aarch64.tar

      - name: Build and test wheels
        uses: pypa/cibuildwheel@v2.21.3
        env:
          CIBW_PLATFORM: linux
          CIBW_BUILD: cp${{ matrix.python }}-${{ matrix.platform_id }}_*
          # Disable building PyPy wheels on all platforms
          CIBW_SKIP: pp*
          CIBW_ARCHS: x86_64,aarch64
          CIBW_MANYLINUX_X86_64_IMAGE: ${{ matrix.manylinux_x86_64_image }}
          CIBW_MANYLINUX_AARCH64_IMAGE: ${{ matrix.manylinux_aarch64_image }}
          #CIBW_MANYLINUX_I686_IMAGE: ${{ matrix.manylinux_image }}
          CIBW_BUILD_FRONTEND: build
          CIBW_TEST_COMMAND: |
            echo "Running unit tests" && \
            PROJECT_ROOT={project} python3 -m unittest discover -s {project}/tests -p "*tests.py" && \
            echo "Running unit tests against oldest supported versions of dependencies" && \
            python3 -m pip install ${{ matrix.numpy_min_version }} ${{ matrix.opencv_min_version }} && \
            PROJECT_ROOT={project} python3 -m unittest discover -s {project}/tests -p "*tests.py"
          CIBW_BUILD_VERBOSITY: 1

      - uses: actions/upload-artifact@v4
        with:
          name: python-wheel-${{ matrix.python }}
          path: ./wheelhouse/*.whl

  push_docker_x86_64:
    name: Push Docker images to DockerHub
    if: github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest
    needs: 
      - build_docker_x86_64
      - test_docker
      - build_and_test_wheels

    steps:
      - name: Download x86_64 Docker image
        uses: actions/download-artifact@v4
        with:
          name: mv-extractor-image-x86_64
          path: /tmp

      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Load and push x86_64 Docker image
        run: |
          docker load --input /tmp/image-x86_64.tar
          docker tag mv-extractor:local-x86_64 lubo1994/mv-extractor:dev-x86_64
          docker push lubo1994/mv-extractor:dev-x86_64

  push_docker_aarch64:
    name: Push Docker images to DockerHub
    if: github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest
    needs: 
      - build_docker_aarch64
      - build_and_test_wheels

    steps:
      - name: Download aarch64 Docker image
        uses: actions/download-artifact@v4
        with:
          name: mv-extractor-image-aarch64
          path: /tmp

      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Load and push aarch64 Docker image
        run: |
          docker load --input /tmp/image-aarch64.tar
          docker tag mv-extractor:local-aarch64 lubo1994/mv-extractor:dev-aarch64
          docker push lubo1994/mv-extractor:dev-aarch64